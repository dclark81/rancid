This file contains additional information regarding the use of Git with RANCID
along with some suggested use cases.


git v git-remote for RCSSYS
---------------------------
git commits all changes to a local repository in $BASEDIR/var/.git

git-remote will push the master branch to all remotes. You can have as many
remotes as you like. Rancid will loop through and push to them all. There are
a few things that need to be setup in order for this to work seamlessly.

Perform these steps before running bin/rancid-run:

    1) Add remotes to $BASEDIR/var

            git remote add [name] [url]
            Example: git remote add origin git@gitlab.acme.com:user/rancit.git

    2) Generate SSH keys for the rancid user and place the public key on the
       remote for silent pushing via ssh.

            ssh-keygen -t rsa
            cat ~/.ssh/id_rsa.pub | \
                ssh git@gitlab.acme.com "cat - >> ~/.ssh/authorized_keys"

        Or simply copy and paste the contents of ~/.ssh/id_rsa.pub to the
        authorized_keys file or the web interface on the remote (if you are
        using GitLab or the like).

    3) Perform inital push to each remote

            git push -u [remote name] master
            
    4) Set $RCSSYS to git-remote in $BASEDIR/etc/rancid.conf
        If there are no remotes configured and $RCRSYS is set to git-remote,
        rancid will behave as if there are no remotes and only commit to
        the local repo in $BASEDIR/var/.git.


git-remote Use Cases
--------------------

---- Distributed Collectors ----

---- Distributed "Central" Repositories ----


